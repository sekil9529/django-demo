[uwsgi]
# 进程
# 进程前缀
procname-prefix = djangoDemo
# 开启主进程
master = true
# 工作进程数量，建议设置为 CPU core 数
workers = 2
# pid文件位置，记录进程id，用于uwsgi关闭
pidfile = /opt/django-demo/uwsgi.pid
# 服务停止时自动移除pid
vacuum = true

# 启动
# socket
socket = :8000
# 后台启动，日志位置，docker环境需要前台启动
# daemonize = .../uwsgi.log

# 项目位置
# 项目根目录
chdir = /opt/django-demo
# 指定app
module = cms.wsgi:application

# gevent配置
# 开启多线程，gevent下必须开启
enable-threads = true
# 单个进程最大协程数
gevent = 100
# 在加载app前自动打猴子补丁，必须设置为true
gevent-early-monkey-patch = true

# 优化配置
listen = 1024
# uWSGI instance平滑重启
reload-mercy = 10
# worker平滑重启
worker-reload-mercy = 10
# 单个工作进程最大处理请求次数，之后重新加载
max-requests = 10000
# 在每个worker中加载app而不是master，如果设置为false，master加载app，然后fork给每个worker
lazy-apps = true
# 进程运行期时不切换 CPU core
cpu-affinity = true
# 序列化 accept() 用法（如果可能）
thunder-lock = true
# 连接超时时间，超时断开与客户端的连接，但是服务器端仍然运行
socket-timeout = 30
# 服务器响应超时时间，超时服务器强制终止
harakiri = 30
# 输出harakiri详细信息
harakiri-verbose = true
# 关闭request日志，生产环境建议关闭（true）
disable-logging = true
# 日志中输出内存占用情况，必须开启request日志，生产环境建议关闭（false）
memory-report = true
# 单次请求worker占用虚拟内存（单位M）上限，超过时该次结果返回后重启worker
reload-on-as = 600
# 单次请求worker占用物理内存（单位M）上限，超过时该次结果返回后重启worker
reload-on-rss = 100
